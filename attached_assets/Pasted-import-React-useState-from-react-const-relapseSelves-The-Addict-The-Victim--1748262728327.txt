import React, { useState } from 'react';

const relapseSelves = [
  'The Addict',
  'The Victim',
  'The Ãœbermensch (Higher Self)',
  'The Avoider',
  'The Shadow'
];

const oldHabits = [
  'Skipped gym',
  'Binge eating',
  'Social withdrawal',
  'Lying to self or others',
  'Procrastination',
  'Obsessive thoughts',
];

const substanceUseOptions = [
  'Cannabis',
  'Alcohol',
  'Pornography',
  'Social media binge',
  'Overstimulation (YouTube/TikTok)',
  'None'
];

const RelapseRadar = () => {
  const [step, setStep] = useState(1);
  const [selectedSelf, setSelectedSelf] = useState('');
  const [selectedHabits, setSelectedHabits] = useState([]);
  const [substanceUse, setSubstanceUse] = useState([]);
  const [reflection, setReflection] = useState('');

  const toggleHabit = (habit) => {
    setSelectedHabits((prev) =>
      prev.includes(habit) ? prev.filter((h) => h !== habit) : [...prev, habit]
    );
  };

  const toggleSubstance = (item) => {
    setSubstanceUse((prev) =>
      prev.includes(item) ? prev.filter((s) => s !== item) : [...prev, item]
    );
  };

  const resetForm = () => {
    setStep(1);
    setSelectedSelf('');
    setSelectedHabits([]);
    setSubstanceUse([]);
    setReflection('');
  };

  const handleSubmit = () => {
    const relapseEntry = {
      self: selectedSelf,
      habits: selectedHabits,
      substances: substanceUse,
      reflection,
      timestamp: new Date().toISOString(),
    };
    console.log('Relapse Entry:', relapseEntry);
    resetForm();
    alert('Relapse entry submitted.');
  };

  return (
    <div className="max-w-xl mx-auto p-6 bg-gray-900 text-white rounded-2xl shadow-lg">
      <h2 className="text-2xl font-bold mb-4 text-center">Relapse Radar</h2>

      {step === 1 && (
        <div>
          <p className="mb-2">Which version of you showed up?</p>
          <div className="space-y-2">
            {relapseSelves.map((self) => (
              <button
                key={self}
                className={`w-full py-2 px-4 rounded-xl border transition-all duration-200 ${
                  selectedSelf === self
                    ? 'bg-indigo-600 border-indigo-300'
                    : 'bg-gray-800 border-gray-600 hover:border-indigo-500'
                }`}
                onClick={() => setSelectedSelf(self)}
              >
                {self}
              </button>
            ))}
          </div>
          <div className="mt-4 text-right">
            <button
              className="px-4 py-2 bg-indigo-700 rounded-xl hover:bg-indigo-800"
              disabled={!selectedSelf}
              onClick={() => setStep(2)}
            >
              Next
            </button>
          </div>
        </div>
      )}

      {step === 2 && (
        <div>
          <p className="mb-2">Which old habits resurfaced?</p>
          <div className="space-y-2">
            {oldHabits.map((habit) => (
              <button
                key={habit}
                className={`w-full py-2 px-4 rounded-xl border transition-all duration-200 ${
                  selectedHabits.includes(habit)
                    ? 'bg-red-600 border-red-300'
                    : 'bg-gray-800 border-gray-600 hover:border-red-500'
                }`}
                onClick={() => toggleHabit(habit)}
              >
                {habit}
              </button>
            ))}
          </div>
          <div className="mt-4 flex justify-between">
            <button
              className="px-4 py-2 bg-gray-700 rounded-xl hover:bg-gray-600"
              onClick={() => setStep(1)}
            >
              Back
            </button>
            <button
              className="px-4 py-2 bg-indigo-700 rounded-xl hover:bg-indigo-800"
              onClick={() => setStep(3)}
            >
              Next
            </button>
          </div>
        </div>
      )}

      {step === 3 && (
        <div>
          <p className="mb-2">Did you use any substances or digital crutches?</p>
          <div className="space-y-2">
            {substanceUseOptions.map((item) => (
              <button
                key={item}
                className={`w-full py-2 px-4 rounded-xl border transition-all duration-200 ${
                  substanceUse.includes(item)
                    ? 'bg-yellow-600 border-yellow-300'
                    : 'bg-gray-800 border-gray-600 hover:border-yellow-500'
                }`}
                onClick={() => toggleSubstance(item)}
              >
                {item}
              </button>
            ))}
          </div>
          <div className="mt-4 flex justify-between">
            <button
              className="px-4 py-2 bg-gray-700 rounded-xl hover:bg-gray-600"
              onClick={() => setStep(2)}
            >
              Back
            </button>
            <button
              className="px-4 py-2 bg-indigo-700 rounded-xl hover:bg-indigo-800"
              onClick={() => setStep(4)}
            >
              Next
            </button>
          </div>
        </div>
      )}

      {step === 4 && (
        <div>
          <p className="mb-2">Does this version of you deserve the future you're building?</p>
          <textarea
            className="w-full h-32 p-3 bg-gray-800 border border-gray-600 rounded-xl focus:outline-none focus:border-indigo-500"
            value={reflection}
            onChange={(e) => setReflection(e.target.value)}
            placeholder="Write your thoughts..."
          />
          <div className="mt-4 flex justify-between">
            <button
              className="px-4 py-2 bg-gray-700 rounded-xl hover:bg-gray-600"
              onClick={() => setStep(3)}
            >
              Back
            </button>
            <button
              className="px-4 py-2 bg-green-700 rounded-xl hover:bg-green-800"
              onClick={handleSubmit}
            >
              Submit
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default RelapseRadar;