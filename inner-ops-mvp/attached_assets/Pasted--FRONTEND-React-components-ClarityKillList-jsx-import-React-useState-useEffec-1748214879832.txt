// === FRONTEND (React) ===
// components/ClarityKillList.jsx

import React, { useState, useEffect } from 'react';
import { db } from '../firebase';
import { collection, query, where, getDocs, orderBy, addDoc, serverTimestamp } from 'firebase/firestore';
import { saveAs } from 'file-saver';
import axios from 'axios';

const suggestedKills = [
  // same 9 suggestedKills as before...
];

const ClarityKillList = ({ userId }) => {
  const [kills, setKills] = useState([]);
  const [aiReflection, setAiReflection] = useState('');
  const [showMirror, setShowMirror] = useState(false);
  const [loadingMirror, setLoadingMirror] = useState(false);

  useEffect(() => {
    const fetchKills = async () => {
      const q = query(
        collection(db, 'clarityKills'),
        where('userId', '==', userId),
        orderBy('timestamp', 'desc')
      );
      const snapshot = await getDocs(q);
      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setKills(data);
    };

    fetchKills();
  }, [userId]);

  const generateMarkdown = () => {
    let md = `# üß† Clarity Kill List ‚Äì Inner Ops Protocol\n**Date:** ${new Date().toISOString().split('T')[0]}\n**Operator:** ${userId}\n**Mission:** Eliminate threats to identity, discipline, and clarity.\n\n---\n`;
    kills.forEach(kill => {
      md += `## ‚ò†Ô∏è Target: ${kill.name}\n`;
      md += `**Threat Profile:** ${kill.profile}\n\n`;
      md += `**Clarity Damage:** ${kill.damage}\n\n`;
      md += `**Elimination Plan:** ${kill.plan}\n\n`;
      md += `**Status:** ${kill.status}\n\n---\n`;
    });
    const blob = new Blob([md], { type: 'text/markdown;charset=utf-8' });
    saveAs(blob, 'clarity_kill_list.md');
  };

  const addSuggestedKill = async (kill) => {
    const newKill = {
      ...kill,
      userId,
      timestamp: serverTimestamp()
    };
    await addDoc(collection(db, 'clarityKills'), newKill);
    setKills(prev => [newKill, ...prev]);
  };

  const triggerAIMirror = async (kill) => {
    setLoadingMirror(true);
    try {
      const prompt = `Reflect deeply and provocatively on this inner threat: ${kill.name}.\nProfile: ${kill.profile}\nDamage: ${kill.damage}\nPlan: ${kill.plan}.\nWhat deeper flaw or blind spot might this reveal about the user? Respond as a mentor.`;
      const response = await axios.post('https://api.openai.com/v1/chat/completions', {
        model: 'gpt-4',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      const insight = response.data.choices[0].message.content;
      setAiReflection(insight);
      setShowMirror(true);
    } catch (err) {
      setAiReflection('Failed to connect to AI Mirror.');
    } finally {
      setLoadingMirror(false);
    }
  };

  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Clarity Kill List</h2>

      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Suggested Targets</h3>
        <ul className="space-y-2">
          {suggestedKills.map((kill, index) => (
            <li key={index} className="border p-3 rounded bg-gray-100">
              <h4 className="font-bold">{kill.name}</h4>
              <p><strong>Threat:</strong> {kill.profile}</p>
              <p><strong>Damage:</strong> {kill.damage}</p>
              <p><strong>Plan:</strong> {kill.plan}</p>
              <button 
                onClick={() => addSuggestedKill(kill)}
                className="mt-2 bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                Add to My Kill List
              </button>
            </li>
          ))}
        </ul>
      </div>

      <ul>
        {kills.map((kill, idx) => (
          <li key={idx} className="mb-4 p-4 border rounded">
            <h3 className="text-lg font-semibold">‚ò†Ô∏è {kill.name}</h3>
            <p><strong>Threat:</strong> {kill.profile}</p>
            <p><strong>Damage:</strong> {kill.damage}</p>
            <p><strong>Plan:</strong> {kill.plan}</p>
            <p><strong>Status:</strong> {kill.status}</p>
            <button onClick={() => triggerAIMirror(kill)} className="mt-2 bg-purple-600 text-white px-2 py-1 rounded hover:bg-purple-700">
              Activate Mirror Mode
            </button>
          </li>
        ))}
      </ul>

      {showMirror && (
        <div className="mt-6 p-4 border border-purple-500 bg-purple-50 rounded">
          <h4 className="font-semibold mb-2">AI Mirror Reflection:</h4>
          <p>{loadingMirror ? 'Loading insight...' : aiReflection}</p>
        </div>
      )}

      <button 
        onClick={generateMarkdown} 
        className="mt-6 bg-black text-white px-4 py-2 rounded hover:bg-gray-800">
        Export as Markdown
      </button>
    </div>
  );
};

export default ClarityKillList;