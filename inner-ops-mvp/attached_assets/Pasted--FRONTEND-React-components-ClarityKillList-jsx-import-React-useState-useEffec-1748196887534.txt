// === FRONTEND (React) ===
// components/ClarityKillList.jsx

import React, { useState, useEffect } from 'react';
import { db } from '../firebase';
import { collection, query, where, getDocs, orderBy, addDoc, serverTimestamp } from 'firebase/firestore';
import { saveAs } from 'file-saver';

const suggestedKills = [
  {
    name: 'Dopamine Drift',
    profile: 'Compulsive short-form scrolling (Reels, TikToks, etc.)',
    damage: 'Fractured attention, weakened will',
    plan: 'Replace with 30m of input fasting per day',
    status: 'Unadded'
  },
  {
    name: 'Friction Avoidance',
    profile: 'Avoiding difficult but necessary conversations',
    damage: 'Delayed growth, bottled resentment',
    plan: 'Schedule 1 hard conversation this week',
    status: 'Unadded'
  },
  {
    name: 'Symptom Chasing',
    profile: 'Obsessive supplement/gadget use without fixing basics',
    damage: 'Avoidance masked as optimization',
    plan: 'Return to sleep, movement, nutrition triad',
    status: 'Unadded'
  },
  {
    name: 'Identity Hangover',
    profile: 'Living based on past shame or former roles',
    damage: 'Regression, playing small',
    plan: 'Declare identity in 1 sentence daily',
    status: 'Unadded'
  },
  {
    name: 'Algorithm Addict',
    profile: 'Outsourced thought to influencers and ‚Äúexpert takes‚Äù',
    damage: 'Weak mental sovereignty',
    plan: 'Daily 1-hour fast from media to build your own thought',
    status: 'Unadded'
  }
];

const ClarityKillList = ({ userId }) => {
  const [kills, setKills] = useState([]);

  useEffect(() => {
    const fetchKills = async () => {
      const q = query(
        collection(db, 'clarityKills'),
        where('userId', '==', userId),
        orderBy('timestamp', 'desc')
      );
      const snapshot = await getDocs(q);
      const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setKills(data);
    };

    fetchKills();
  }, [userId]);

  const generateMarkdown = () => {
    let md = `# üß† Clarity Kill List ‚Äì Inner Ops Protocol\n**Date:** ${new Date().toISOString().split('T')[0]}\n**Operator:** ${userId}\n**Mission:** Eliminate threats to identity, discipline, and clarity.\n\n---\n`;
    kills.forEach(kill => {
      md += `## ‚ò†Ô∏è Target: ${kill.name}\n`;
      md += `**Threat Profile:** ${kill.profile}\n\n`;
      md += `**Clarity Damage:** ${kill.damage}\n\n`;
      md += `**Elimination Plan:** ${kill.plan}\n\n`;
      md += `**Status:** ${kill.status}\n\n---\n`;
    });
    const blob = new Blob([md], { type: 'text/markdown;charset=utf-8' });
    saveAs(blob, 'clarity_kill_list.md');
  };

  const addSuggestedKill = async (kill) => {
    await addDoc(collection(db, 'clarityKills'), {
      ...kill,
      userId,
      timestamp: serverTimestamp()
    });
    setKills(prev => [kill, ...prev]);
  };

  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Clarity Kill List</h2>

      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">Suggested Targets</h3>
        <ul className="space-y-2">
          {suggestedKills.map((kill, index) => (
            <li key={index} className="border p-3 rounded bg-gray-100">
              <h4 className="font-bold">{kill.name}</h4>
              <p><strong>Threat:</strong> {kill.profile}</p>
              <p><strong>Damage:</strong> {kill.damage}</p>
              <p><strong>Plan:</strong> {kill.plan}</p>
              <button 
                onClick={() => addSuggestedKill(kill)}
                className="mt-2 bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                Add to My Kill List
              </button>
            </li>
          ))}
        </ul>
      </div>

      <ul>
        {kills.map(kill => (
          <li key={kill.id} className="mb-4 p-4 border rounded">
            <h3 className="text-lg font-semibold">‚ò†Ô∏è {kill.name}</h3>
            <p><strong>Threat:</strong> {kill.profile}</p>
            <p><strong>Damage:</strong> {kill.damage}</p>
            <p><strong>Plan:</strong> {kill.plan}</p>
            <p><strong>Status:</strong> {kill.status}</p>
          </li>
        ))}
      </ul>

      <button 
        onClick={generateMarkdown} 
        className="mt-6 bg-black text-white px-4 py-2 rounded hover:bg-gray-800">
        Export as Markdown
      </button>
    </div>
  );
};

export default ClarityKillList;